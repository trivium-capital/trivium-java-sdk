/*
 * trivium-cash
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package tech.triviumcapital.clients.java.api;

import com.fasterxml.jackson.core.type.TypeReference;

import tech.triviumcapital.clients.java.ApiException;
import tech.triviumcapital.clients.java.ApiClient;
import tech.triviumcapital.clients.java.BaseApi;
import tech.triviumcapital.clients.java.Configuration;
import tech.triviumcapital.clients.java.Pair;

import tech.triviumcapital.clients.java.model.Account;
import tech.triviumcapital.clients.java.model.BadRequest;
import tech.triviumcapital.clients.java.model.Balances;
import tech.triviumcapital.clients.java.model.CashInboundCallbackEvent;
import tech.triviumcapital.clients.java.model.CreateAccountRequest;
import tech.triviumcapital.clients.java.model.DepositRequest;
import tech.triviumcapital.clients.java.model.DepositResponse;
import tech.triviumcapital.clients.java.model.Rates;
import tech.triviumcapital.clients.java.model.RedemptionInfo;
import tech.triviumcapital.clients.java.model.RedemptionRequest;
import tech.triviumcapital.clients.java.model.RedemptionResponse;
import tech.triviumcapital.clients.java.model.SubscribeCallbackRequest;
import tech.triviumcapital.clients.java.model.SubscribeCallbackResponse;
import tech.triviumcapital.clients.java.model.Transactions;
import java.util.UUID;
import tech.triviumcapital.clients.java.model.Unauthorized;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class CashApi extends BaseApi {

  public CashApi() {
    super(Configuration.getDefaultApiClient());
  }

  public CashApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * 
   * 
   * @param accountId  (required)
   * @return Account
   * @throws ApiException if fails to make API call
   */
  public Account getApiV1CashAccountAccountid(UUID accountId) throws ApiException {
    return this.getApiV1CashAccountAccountid(accountId, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param accountId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Account
   * @throws ApiException if fails to make API call
   */
  public Account getApiV1CashAccountAccountid(UUID accountId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling getApiV1CashAccountAccountid");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/account/{accountId}"
      .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<Account> localVarReturnType = new TypeReference<Account>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Returns cash accounts for given user id
   * @param userId  (required)
   * @return List&lt;Account&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Account> getApiV1CashAccountUserUserid(UUID userId) throws ApiException {
    return this.getApiV1CashAccountUserUserid(userId, Collections.emptyMap());
  }


  /**
   * 
   * Returns cash accounts for given user id
   * @param userId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Account&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Account> getApiV1CashAccountUserUserid(UUID userId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getApiV1CashAccountUserUserid");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/account/user/{userId}"
      .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<List<Account>> localVarReturnType = new TypeReference<List<Account>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Returns balance according to currency
   * @param userId  (required)
   * @return Balances
   * @throws ApiException if fails to make API call
   */
  public Balances getApiV1CashBalanceUserid(UUID userId) throws ApiException {
    return this.getApiV1CashBalanceUserid(userId, Collections.emptyMap());
  }


  /**
   * 
   * Returns balance according to currency
   * @param userId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Balances
   * @throws ApiException if fails to make API call
   */
  public Balances getApiV1CashBalanceUserid(UUID userId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getApiV1CashBalanceUserid");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/balance/{userId}"
      .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<Balances> localVarReturnType = new TypeReference<Balances>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Returns rates according to currency in decimal format. Multiply by 100 for percentage points.
   * @param userCountry  (optional)
   * @return Rates
   * @throws ApiException if fails to make API call
   */
  public Rates getApiV1CashRates(String userCountry) throws ApiException {
    return this.getApiV1CashRates(userCountry, Collections.emptyMap());
  }


  /**
   * 
   * Returns rates according to currency in decimal format. Multiply by 100 for percentage points.
   * @param userCountry  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Rates
   * @throws ApiException if fails to make API call
   */
  public Rates getApiV1CashRates(String userCountry, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/rates";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("userCountry", userCountry));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<Rates> localVarReturnType = new TypeReference<Rates>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Get list of deposit and transaction requests
   * @param accountId  (required)
   * @param limit  (optional)
   * @param offset  (optional)
   * @param paginate  (optional)
   * @return Transactions
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public Transactions getApiV1CashTransactionsAccountid(UUID accountId, Integer limit, Integer offset, Boolean paginate) throws ApiException {
    return this.getApiV1CashTransactionsAccountid(accountId, limit, offset, paginate, Collections.emptyMap());
  }


  /**
   * 
   * Get list of deposit and transaction requests
   * @param accountId  (required)
   * @param limit  (optional)
   * @param offset  (optional)
   * @param paginate  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return Transactions
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public Transactions getApiV1CashTransactionsAccountid(UUID accountId, Integer limit, Integer offset, Boolean paginate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling getApiV1CashTransactionsAccountid");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/transactions/{accountId}"
      .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    localVarQueryParams.addAll(apiClient.parameterToPair("paginate", paginate));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<Transactions> localVarReturnType = new TypeReference<Transactions>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Get redemption information
   * @return RedemptionInfo
   * @throws ApiException if fails to make API call
   */
  public RedemptionInfo getApiV1CashTransactionsRedemptionInfo() throws ApiException {
    return this.getApiV1CashTransactionsRedemptionInfo(Collections.emptyMap());
  }


  /**
   * 
   * Get redemption information
   * @param additionalHeaders additionalHeaders for this call
   * @return RedemptionInfo
   * @throws ApiException if fails to make API call
   */
  public RedemptionInfo getApiV1CashTransactionsRedemptionInfo(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/transactions/redemption/info";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<RedemptionInfo> localVarReturnType = new TypeReference<RedemptionInfo>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Create cash account
   * @param createAccountRequest Create account for this userId (required)
   * @return Account
   * @throws ApiException if fails to make API call
   */
  public Account postApiV1CashAccount(CreateAccountRequest createAccountRequest) throws ApiException {
    return this.postApiV1CashAccount(createAccountRequest, Collections.emptyMap());
  }


  /**
   * 
   * Create cash account
   * @param createAccountRequest Create account for this userId (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Account
   * @throws ApiException if fails to make API call
   */
  public Account postApiV1CashAccount(CreateAccountRequest createAccountRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createAccountRequest;
    
    // verify the required parameter 'createAccountRequest' is set
    if (createAccountRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createAccountRequest' when calling postApiV1CashAccount");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/account";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<Account> localVarReturnType = new TypeReference<Account>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param subscribeCallbackRequest  (required)
   * @return SubscribeCallbackResponse
   * @throws ApiException if fails to make API call
   */
  public SubscribeCallbackResponse postApiV1CashEvents(SubscribeCallbackRequest subscribeCallbackRequest) throws ApiException {
    return this.postApiV1CashEvents(subscribeCallbackRequest, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param subscribeCallbackRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscribeCallbackResponse
   * @throws ApiException if fails to make API call
   */
  public SubscribeCallbackResponse postApiV1CashEvents(SubscribeCallbackRequest subscribeCallbackRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = subscribeCallbackRequest;
    
    // verify the required parameter 'subscribeCallbackRequest' is set
    if (subscribeCallbackRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'subscribeCallbackRequest' when calling postApiV1CashEvents");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/events";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json", "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<SubscribeCallbackResponse> localVarReturnType = new TypeReference<SubscribeCallbackResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Create deposit request
   * @param accountId  (required)
   * @param depositRequest  (required)
   * @param xDeduplicationId Unique value to be used for deduplication in case of network failure. Valid length is 1-64 characters. (optional)
   * @return DepositResponse
   * @throws ApiException if fails to make API call
   */
  public DepositResponse postApiV1CashRequestDepositAccountid(UUID accountId, DepositRequest depositRequest, String xDeduplicationId) throws ApiException {
    return this.postApiV1CashRequestDepositAccountid(accountId, depositRequest, xDeduplicationId, Collections.emptyMap());
  }


  /**
   * 
   * Create deposit request
   * @param accountId  (required)
   * @param depositRequest  (required)
   * @param xDeduplicationId Unique value to be used for deduplication in case of network failure. Valid length is 1-64 characters. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return DepositResponse
   * @throws ApiException if fails to make API call
   */
  public DepositResponse postApiV1CashRequestDepositAccountid(UUID accountId, DepositRequest depositRequest, String xDeduplicationId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = depositRequest;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling postApiV1CashRequestDepositAccountid");
    }
    
    // verify the required parameter 'depositRequest' is set
    if (depositRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'depositRequest' when calling postApiV1CashRequestDepositAccountid");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/request/deposit/{accountId}"
      .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (xDeduplicationId != null)
      localVarHeaderParams.put("X-Deduplication-Id", apiClient.parameterToString(xDeduplicationId));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<DepositResponse> localVarReturnType = new TypeReference<DepositResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Create redemption request
   * @param accountId  (required)
   * @param redemptionRequest  (required)
   * @param xDeduplicationId Unique value to be used for deduplication in case of network failure. Valid length is 1-64 characters. (optional)
   * @return RedemptionResponse
   * @throws ApiException if fails to make API call
   */
  public RedemptionResponse postApiV1CashRequestRedemptionAccountid(UUID accountId, RedemptionRequest redemptionRequest, String xDeduplicationId) throws ApiException {
    return this.postApiV1CashRequestRedemptionAccountid(accountId, redemptionRequest, xDeduplicationId, Collections.emptyMap());
  }


  /**
   * 
   * Create redemption request
   * @param accountId  (required)
   * @param redemptionRequest  (required)
   * @param xDeduplicationId Unique value to be used for deduplication in case of network failure. Valid length is 1-64 characters. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return RedemptionResponse
   * @throws ApiException if fails to make API call
   */
  public RedemptionResponse postApiV1CashRequestRedemptionAccountid(UUID accountId, RedemptionRequest redemptionRequest, String xDeduplicationId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = redemptionRequest;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling postApiV1CashRequestRedemptionAccountid");
    }
    
    // verify the required parameter 'redemptionRequest' is set
    if (redemptionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'redemptionRequest' when calling postApiV1CashRequestRedemptionAccountid");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/request/redemption/{accountId}"
      .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (xDeduplicationId != null)
      localVarHeaderParams.put("X-Deduplication-Id", apiClient.parameterToString(xDeduplicationId));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    TypeReference<RedemptionResponse> localVarReturnType = new TypeReference<RedemptionResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * Cash-related callback events to be sent to Trivium
   * @param cashInboundCallbackEvent  (required)
   * @throws ApiException if fails to make API call
   */
  public void putApiV1CashCallback(CashInboundCallbackEvent cashInboundCallbackEvent) throws ApiException {
    this.putApiV1CashCallback(cashInboundCallbackEvent, Collections.emptyMap());
  }


  /**
   * 
   * Cash-related callback events to be sent to Trivium
   * @param cashInboundCallbackEvent  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void putApiV1CashCallback(CashInboundCallbackEvent cashInboundCallbackEvent, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = cashInboundCallbackEvent;
    
    // verify the required parameter 'cashInboundCallbackEvent' is set
    if (cashInboundCallbackEvent == null) {
      throw new ApiException(400, "Missing the required parameter 'cashInboundCallbackEvent' when calling putApiV1CashCallback");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/cash/callback";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "apiKeyAuth", "httpAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
