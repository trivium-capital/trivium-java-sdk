/*
 * trivium-cash
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tech.triviumcapital.clients.java.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ProviderDetails
 */
@JsonPropertyOrder({
  ProviderDetails.JSON_PROPERTY_PROVIDER,
  ProviderDetails.JSON_PROPERTY_PRODUCT_NAME,
  ProviderDetails.JSON_PROPERTY_PRODUCT_DISTINCTION,
  ProviderDetails.JSON_PROPERTY_CURRENCY_CODE,
  ProviderDetails.JSON_PROPERTY_RETURNS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class ProviderDetails {
  public static final String JSON_PROPERTY_PROVIDER = "provider";
  private String provider;

  public static final String JSON_PROPERTY_PRODUCT_NAME = "productName";
  private String productName;

  public static final String JSON_PROPERTY_PRODUCT_DISTINCTION = "productDistinction";
  private String productDistinction;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "currencyCode";
  private String currencyCode;

  public static final String JSON_PROPERTY_RETURNS = "returns";
  private BigDecimal returns;

  public ProviderDetails() {
  }

  /**
   * Constructor with all args parameters
   */
  public ProviderDetails(@JsonProperty(JSON_PROPERTY_PROVIDER) String provider, @JsonProperty(JSON_PROPERTY_PRODUCT_NAME) String productName, @JsonProperty(JSON_PROPERTY_PRODUCT_DISTINCTION) String productDistinction, @JsonProperty(JSON_PROPERTY_CURRENCY_CODE) String currencyCode, @JsonProperty(JSON_PROPERTY_RETURNS) BigDecimal returns) {
    this.provider = provider;
    this.productName = productName;
    this.productDistinction = productDistinction;
    this.currencyCode = currencyCode;
    this.returns = returns;
  }

  public ProviderDetails provider(String provider) {
    
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProvider() {
    return provider;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProvider(String provider) {
    this.provider = provider;
  }

  public ProviderDetails productName(String productName) {
    
    this.productName = productName;
    return this;
  }

  /**
   * Get productName
   * @return productName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProductName() {
    return productName;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProductName(String productName) {
    this.productName = productName;
  }

  public ProviderDetails productDistinction(String productDistinction) {
    
    this.productDistinction = productDistinction;
    return this;
  }

  /**
   * Get productDistinction
   * @return productDistinction
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_DISTINCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductDistinction() {
    return productDistinction;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_DISTINCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductDistinction(String productDistinction) {
    this.productDistinction = productDistinction;
  }

  public ProviderDetails currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrencyCode() {
    return currencyCode;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public ProviderDetails returns(BigDecimal returns) {
    
    this.returns = returns;
    return this;
  }

  /**
   * Get returns
   * @return returns
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RETURNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getReturns() {
    return returns;
  }


  @JsonProperty(JSON_PROPERTY_RETURNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReturns(BigDecimal returns) {
    this.returns = returns;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderDetails providerDetails = (ProviderDetails) o;
    return Objects.equals(this.provider, providerDetails.provider) &&
        Objects.equals(this.productName, providerDetails.productName) &&
        Objects.equals(this.productDistinction, providerDetails.productDistinction) &&
        Objects.equals(this.currencyCode, providerDetails.currencyCode) &&
        Objects.equals(this.returns, providerDetails.returns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provider, productName, productDistinction, currencyCode, returns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderDetails {\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productDistinction: ").append(toIndentedString(productDistinction)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    returns: ").append(toIndentedString(returns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private ProviderDetails instance;

    public Builder() {
      this(new ProviderDetails());
    }

    protected Builder(ProviderDetails instance) {
      this.instance = instance;
    }

    public ProviderDetails.Builder provider(String provider) {
      this.instance.provider = provider;
      return this;
    }
    public ProviderDetails.Builder productName(String productName) {
      this.instance.productName = productName;
      return this;
    }
    public ProviderDetails.Builder productDistinction(String productDistinction) {
      this.instance.productDistinction = productDistinction;
      return this;
    }
    public ProviderDetails.Builder currencyCode(String currencyCode) {
      this.instance.currencyCode = currencyCode;
      return this;
    }
    public ProviderDetails.Builder returns(BigDecimal returns) {
      this.instance.returns = returns;
      return this;
    }


    /**
    * returns a built ProviderDetails instance.
    *
    * The builder is not reusable.
    */
    public ProviderDetails build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static ProviderDetails.Builder builder() {
    return new ProviderDetails.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public ProviderDetails.Builder toBuilder() {
    return new ProviderDetails.Builder()
      .provider(getProvider())
      .productName(getProductName())
      .productDistinction(getProductDistinction())
      .currencyCode(getCurrencyCode())
      .returns(getReturns());
  }


}

