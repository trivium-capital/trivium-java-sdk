/*
 * trivium-cash
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tech.triviumcapital.clients.java.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import tech.triviumcapital.clients.java.model.FastParticipant;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Fast
 */
@JsonPropertyOrder({
  Fast.JSON_PROPERTY_ACCOUNT_NUMBER,
  Fast.JSON_PROPERTY_RECIPIENT_NAME,
  Fast.JSON_PROPERTY_BANK,
  Fast.JSON_PROPERTY_REFERENCE,
  Fast.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Fast implements LocalTransfer, TransferDetails {
  public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "accountNumber";
  private String accountNumber;

  public static final String JSON_PROPERTY_RECIPIENT_NAME = "recipientName";
  private String recipientName;

  public static final String JSON_PROPERTY_BANK = "bank";
  private FastParticipant bank;

  public static final String JSON_PROPERTY_REFERENCE = "reference";
  private String reference;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public Fast() {
  }

  /**
   * Constructor with all args parameters
   */
  public Fast(@JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER) String accountNumber, @JsonProperty(JSON_PROPERTY_RECIPIENT_NAME) String recipientName, @JsonProperty(JSON_PROPERTY_BANK) FastParticipant bank, @JsonProperty(JSON_PROPERTY_REFERENCE) String reference, @JsonProperty(JSON_PROPERTY_TYPE) String type) {
    this.accountNumber = accountNumber;
    this.recipientName = recipientName;
    this.bank = bank;
    this.reference = reference;
    this.type = type;
  }

  public Fast accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Get accountNumber
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountNumber() {
    return accountNumber;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public Fast recipientName(String recipientName) {
    
    this.recipientName = recipientName;
    return this;
  }

  /**
   * Get recipientName
   * @return recipientName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECIPIENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRecipientName() {
    return recipientName;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }

  public Fast bank(FastParticipant bank) {
    
    this.bank = bank;
    return this;
  }

  /**
   * Get bank
   * @return bank
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BANK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FastParticipant getBank() {
    return bank;
  }


  @JsonProperty(JSON_PROPERTY_BANK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBank(FastParticipant bank) {
    this.bank = bank;
  }

  public Fast reference(String reference) {
    
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReference() {
    return reference;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference(String reference) {
    this.reference = reference;
  }

  public Fast type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fast fast = (Fast) o;
    return Objects.equals(this.accountNumber, fast.accountNumber) &&
        Objects.equals(this.recipientName, fast.recipientName) &&
        Objects.equals(this.bank, fast.bank) &&
        Objects.equals(this.reference, fast.reference) &&
        Objects.equals(this.type, fast.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, recipientName, bank, reference, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fast {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    bank: ").append(toIndentedString(bank)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private Fast instance;

    public Builder() {
      this(new Fast());
    }

    protected Builder(Fast instance) {
      this.instance = instance;
    }

    public Fast.Builder accountNumber(String accountNumber) {
      this.instance.accountNumber = accountNumber;
      return this;
    }
    public Fast.Builder recipientName(String recipientName) {
      this.instance.recipientName = recipientName;
      return this;
    }
    public Fast.Builder bank(FastParticipant bank) {
      this.instance.bank = bank;
      return this;
    }
    public Fast.Builder reference(String reference) {
      this.instance.reference = reference;
      return this;
    }
    public Fast.Builder type(String type) {
      this.instance.type = type;
      return this;
    }


    /**
    * returns a built Fast instance.
    *
    * The builder is not reusable.
    */
    public Fast build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static Fast.Builder builder() {
    return new Fast.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public Fast.Builder toBuilder() {
    return new Fast.Builder()
      .accountNumber(getAccountNumber())
      .recipientName(getRecipientName())
      .bank(getBank())
      .reference(getReference())
      .type(getType());
  }


}

