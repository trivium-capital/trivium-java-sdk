/*
 * trivium-cash
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tech.triviumcapital.clients.java.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MonthlyStatementMetadata
 */
@JsonPropertyOrder({
  MonthlyStatementMetadata.JSON_PROPERTY_YEAR,
  MonthlyStatementMetadata.JSON_PROPERTY_MONTH,
  MonthlyStatementMetadata.JSON_PROPERTY_DOWNLOAD_LINK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class MonthlyStatementMetadata {
  public static final String JSON_PROPERTY_YEAR = "year";
  private Integer year;

  public static final String JSON_PROPERTY_MONTH = "month";
  private Integer month;

  public static final String JSON_PROPERTY_DOWNLOAD_LINK = "downloadLink";
  private String downloadLink;

  public MonthlyStatementMetadata() {
  }

  /**
   * Constructor with all args parameters
   */
  public MonthlyStatementMetadata(@JsonProperty(JSON_PROPERTY_YEAR) Integer year, @JsonProperty(JSON_PROPERTY_MONTH) Integer month, @JsonProperty(JSON_PROPERTY_DOWNLOAD_LINK) String downloadLink) {
    this.year = year;
    this.month = month;
    this.downloadLink = downloadLink;
  }

  public MonthlyStatementMetadata year(Integer year) {
    
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_YEAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getYear() {
    return year;
  }


  @JsonProperty(JSON_PROPERTY_YEAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setYear(Integer year) {
    this.year = year;
  }

  public MonthlyStatementMetadata month(Integer month) {
    
    this.month = month;
    return this;
  }

  /**
   * Month of year, from 1 (January) to 12 (December)
   * @return month
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMonth() {
    return month;
  }


  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMonth(Integer month) {
    this.month = month;
  }

  public MonthlyStatementMetadata downloadLink(String downloadLink) {
    
    this.downloadLink = downloadLink;
    return this;
  }

  /**
   * Get downloadLink
   * @return downloadLink
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDownloadLink() {
    return downloadLink;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDownloadLink(String downloadLink) {
    this.downloadLink = downloadLink;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonthlyStatementMetadata monthlyStatementMetadata = (MonthlyStatementMetadata) o;
    return Objects.equals(this.year, monthlyStatementMetadata.year) &&
        Objects.equals(this.month, monthlyStatementMetadata.month) &&
        Objects.equals(this.downloadLink, monthlyStatementMetadata.downloadLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(year, month, downloadLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonthlyStatementMetadata {\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    downloadLink: ").append(toIndentedString(downloadLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private MonthlyStatementMetadata instance;

    public Builder() {
      this(new MonthlyStatementMetadata());
    }

    protected Builder(MonthlyStatementMetadata instance) {
      this.instance = instance;
    }

    public MonthlyStatementMetadata.Builder year(Integer year) {
      this.instance.year = year;
      return this;
    }
    public MonthlyStatementMetadata.Builder month(Integer month) {
      this.instance.month = month;
      return this;
    }
    public MonthlyStatementMetadata.Builder downloadLink(String downloadLink) {
      this.instance.downloadLink = downloadLink;
      return this;
    }


    /**
    * returns a built MonthlyStatementMetadata instance.
    *
    * The builder is not reusable.
    */
    public MonthlyStatementMetadata build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static MonthlyStatementMetadata.Builder builder() {
    return new MonthlyStatementMetadata.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public MonthlyStatementMetadata.Builder toBuilder() {
    return new MonthlyStatementMetadata.Builder()
      .year(getYear())
      .month(getMonth())
      .downloadLink(getDownloadLink());
  }


}

