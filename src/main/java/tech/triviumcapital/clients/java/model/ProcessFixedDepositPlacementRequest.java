/*
 * trivium-cash
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tech.triviumcapital.clients.java.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import tech.triviumcapital.clients.java.model.Transfer;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ProcessFixedDepositPlacementRequest
 */
@JsonPropertyOrder({
  ProcessFixedDepositPlacementRequest.JSON_PROPERTY_QUANTITY,
  ProcessFixedDepositPlacementRequest.JSON_PROPERTY_TRANSFER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class ProcessFixedDepositPlacementRequest {
  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private BigDecimal quantity;

  public static final String JSON_PROPERTY_TRANSFER = "transfer";
  private Transfer transfer;

  public ProcessFixedDepositPlacementRequest() {
  }

  /**
   * Constructor with all args parameters
   */
  public ProcessFixedDepositPlacementRequest(@JsonProperty(JSON_PROPERTY_QUANTITY) BigDecimal quantity, @JsonProperty(JSON_PROPERTY_TRANSFER) Transfer transfer) {
    this.quantity = quantity;
    this.transfer = transfer;
  }

  public ProcessFixedDepositPlacementRequest quantity(BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }

  public ProcessFixedDepositPlacementRequest transfer(Transfer transfer) {
    
    this.transfer = transfer;
    return this;
  }

  /**
   * Get transfer
   * @return transfer
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Transfer getTransfer() {
    return transfer;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransfer(Transfer transfer) {
    this.transfer = transfer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessFixedDepositPlacementRequest processFixedDepositPlacementRequest = (ProcessFixedDepositPlacementRequest) o;
    return Objects.equals(this.quantity, processFixedDepositPlacementRequest.quantity) &&
        Objects.equals(this.transfer, processFixedDepositPlacementRequest.transfer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, transfer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessFixedDepositPlacementRequest {\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    transfer: ").append(toIndentedString(transfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private ProcessFixedDepositPlacementRequest instance;

    public Builder() {
      this(new ProcessFixedDepositPlacementRequest());
    }

    protected Builder(ProcessFixedDepositPlacementRequest instance) {
      this.instance = instance;
    }

    public ProcessFixedDepositPlacementRequest.Builder quantity(BigDecimal quantity) {
      this.instance.quantity = quantity;
      return this;
    }
    public ProcessFixedDepositPlacementRequest.Builder transfer(Transfer transfer) {
      this.instance.transfer = transfer;
      return this;
    }


    /**
    * returns a built ProcessFixedDepositPlacementRequest instance.
    *
    * The builder is not reusable.
    */
    public ProcessFixedDepositPlacementRequest build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static ProcessFixedDepositPlacementRequest.Builder builder() {
    return new ProcessFixedDepositPlacementRequest.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public ProcessFixedDepositPlacementRequest.Builder toBuilder() {
    return new ProcessFixedDepositPlacementRequest.Builder()
      .quantity(getQuantity())
      .transfer(getTransfer());
  }


}

