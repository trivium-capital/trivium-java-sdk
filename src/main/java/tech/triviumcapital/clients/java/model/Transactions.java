/*
 * trivium-cash
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tech.triviumcapital.clients.java.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import tech.triviumcapital.clients.java.model.Transaction;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Transactions
 */
@JsonPropertyOrder({
  Transactions.JSON_PROPERTY_TRANSACTIONS,
  Transactions.JSON_PROPERTY_TOTAL_COUNT,
  Transactions.JSON_PROPERTY_HAS_NEXT_PAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-26T10:02:28.662121+08:00[Asia/Singapore]", comments = "Generator version: 7.7.0")
public class Transactions {
  public static final String JSON_PROPERTY_TRANSACTIONS = "transactions";
  private List<Transaction> transactions = new ArrayList<>();

  public static final String JSON_PROPERTY_TOTAL_COUNT = "totalCount";
  private Integer totalCount;

  public static final String JSON_PROPERTY_HAS_NEXT_PAGE = "hasNextPage";
  private Boolean hasNextPage;

  public Transactions() {
  }

  /**
   * Constructor with all args parameters
   */
  public Transactions(@JsonProperty(JSON_PROPERTY_TRANSACTIONS) List<Transaction> transactions, @JsonProperty(JSON_PROPERTY_TOTAL_COUNT) Integer totalCount, @JsonProperty(JSON_PROPERTY_HAS_NEXT_PAGE) Boolean hasNextPage) {
    this.transactions = transactions;
    this.totalCount = totalCount;
    this.hasNextPage = hasNextPage;
  }

  public Transactions transactions(List<Transaction> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public Transactions addTransactionsItem(Transaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

  /**
   * Get transactions
   * @return transactions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Transaction> getTransactions() {
    return transactions;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactions(List<Transaction> transactions) {
    this.transactions = transactions;
  }

  public Transactions totalCount(Integer totalCount) {
    
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Get totalCount
   * @return totalCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalCount() {
    return totalCount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }

  public Transactions hasNextPage(Boolean hasNextPage) {
    
    this.hasNextPage = hasNextPage;
    return this;
  }

  /**
   * Get hasNextPage
   * @return hasNextPage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_NEXT_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isHasNextPage() {
    return hasNextPage;
  }


  @JsonProperty(JSON_PROPERTY_HAS_NEXT_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasNextPage(Boolean hasNextPage) {
    this.hasNextPage = hasNextPage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transactions transactions = (Transactions) o;
    return Objects.equals(this.transactions, transactions.transactions) &&
        Objects.equals(this.totalCount, transactions.totalCount) &&
        Objects.equals(this.hasNextPage, transactions.hasNextPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactions, totalCount, hasNextPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transactions {\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    hasNextPage: ").append(toIndentedString(hasNextPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private Transactions instance;

    public Builder() {
      this(new Transactions());
    }

    protected Builder(Transactions instance) {
      this.instance = instance;
    }

    public Transactions.Builder transactions(List<Transaction> transactions) {
      this.instance.transactions = transactions;
      return this;
    }
    public Transactions.Builder totalCount(Integer totalCount) {
      this.instance.totalCount = totalCount;
      return this;
    }
    public Transactions.Builder hasNextPage(Boolean hasNextPage) {
      this.instance.hasNextPage = hasNextPage;
      return this;
    }


    /**
    * returns a built Transactions instance.
    *
    * The builder is not reusable.
    */
    public Transactions build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static Transactions.Builder builder() {
    return new Transactions.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public Transactions.Builder toBuilder() {
    return new Transactions.Builder()
      .transactions(getTransactions())
      .totalCount(getTotalCount())
      .hasNextPage(isHasNextPage());
  }


}

