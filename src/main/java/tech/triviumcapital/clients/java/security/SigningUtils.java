package tech.triviumcapital.clients.java.security;

import java.nio.charset.StandardCharsets;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class SigningUtils {

    /**
     * @param keySize recommended to be at least 2048 bits.
     * @return {@link java.security.KeyPair}
     * @throws NoSuchAlgorithmException
     */
    public static KeyPair generateRSASigningKeyPair(int keySize) throws NoSuchAlgorithmException {
        KeyPairGenerator kpg = java.security.KeyPairGenerator.getInstance("RSA");
        kpg.initialize(keySize);
        return kpg.generateKeyPair();
    }

    /**
     * Hashes plainText with SHA-256, then signs hash with privateKey and 'SHA256withRSA' algorithm.
     *
     * @param privateKey generated by "RSA" algorithm
     * @param plainText
     * @return
     * @throws NoSuchAlgorithmException
     * @throws InvalidKeyException
     * @throws SignatureException
     */
    public static byte[] sign(PrivateKey privateKey, String plainText) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        Signature signer = Signature.getInstance("SHA256withRSA");
        signer.initSign(privateKey);
        signer.update(digest.digest(plainText.getBytes(StandardCharsets.UTF_8)));
        return signer.sign();
    }

    /**
     * Hashes plainText with SHA-256, then verifies hash with publicKey and 'SHA256withRSA' algorithm.
     *
     * @param publicKey generated by "RSA" algorithm
     * @param signature
     * @param plainText
     * @return
     * @throws NoSuchAlgorithmException
     * @throws InvalidKeyException
     * @throws SignatureException
     */
    public static boolean verify(PublicKey publicKey, byte[] signature, String plainText) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        Signature signer = Signature.getInstance("SHA256withRSA");
        signer.initVerify(publicKey);
        signer.update(digest.digest(plainText.getBytes(StandardCharsets.UTF_8)));
        return signer.verify(signature);
    }

    public static PrivateKey privateKeyFromBase64String(String base64String) throws NoSuchAlgorithmException, InvalidKeySpecException {
        return privateKeyFromBytes(bytesFromString(base64String));
    }


    public static PrivateKey privateKeyFromBytes(byte[] bytes) throws NoSuchAlgorithmException, InvalidKeySpecException {
        return KeyFactory
                .getInstance("RSA")
                .generatePrivate(new PKCS8EncodedKeySpec(bytes));
    }

    public static byte[] bytesFromString(String base64String) {
        return Base64.getDecoder().decode(base64String);
    }

    public static PublicKey publicKeyFromBytes(byte[] bytes) throws NoSuchAlgorithmException, InvalidKeySpecException {
        return KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(bytes));
    }

    public static PublicKey publicKeyFromBase64String(String base64String) throws NoSuchAlgorithmException, InvalidKeySpecException {
        return publicKeyFromBytes(bytesFromString(base64String));
    }

}